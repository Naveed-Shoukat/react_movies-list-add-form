{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","newMovie","setNewMovie","handelOnChnage","key","prevState","updatedState","onSubmit","preventDefault","prevCount","newValue","disabled","isDisableAddBtn","App","React","moviesFromServer","moviesList","setMoviesList","handelAddMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.254fcdf9.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const handelOnChnage = (key: keyof Movie, value: string) => {\n    setNewMovie(prevState => {\n      const updatedState = { ...prevState };\n\n      updatedState[key] = value;\n\n      return updatedState;\n    });\n  };\n\n  const isDisableAddBtn = () => {\n    const {\n      title,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = newMovie;\n\n    if (title && imgUrl && imdbUrl && imdbId) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => {\n        event.preventDefault();\n        setCount(prevCount => prevCount + 1);\n        onAdd(newMovie);\n        setNewMovie({\n          title: '',\n          description: '',\n          imgUrl: '',\n          imdbUrl: '',\n          imdbId: '',\n        });\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={(newValue) => handelOnChnage('title', newValue)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={(newValue) => handelOnChnage('description', newValue)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={(newValue) => handelOnChnage('imgUrl', newValue)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={(newValue) => handelOnChnage('imdbUrl', newValue)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={(newValue) => handelOnChnage('imdbId', newValue)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisableAddBtn()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [moviesList, setMoviesList] = React.useState(moviesFromServer);\n\n  const handelAddMovie = (movie: Movie): void => {\n    setMoviesList(prevState => {\n      return [\n        ...prevState,\n        movie,\n      ];\n    });\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie) => handelAddMovie(movie)} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}